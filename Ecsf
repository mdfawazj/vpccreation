Hereâ€™s a Terraform script to create an ECS Fargate cluster with three services (gift-dev-1, gift-dev-2, and gift-dev-3) where each service has its own ALB, target group, and listener. The configuration is modular with variable files to make it flexible for updates.

Directory Structure:
bash
Copy code
/terraform
    /variables.tf
    /main.tf
    /ecs-cluster.tf
    /task-definitions.tf
    /alb.tf
    /outputs.tf
1. variables.tf
This file will contain all the variables used across the Terraform files.

hcl
Copy code
variable "cluster_name" {
  description = "ECS Fargate cluster name"
  type        = string
  default     = "dev-gift"
}

variable "services" {
  description = "List of ECS services to create"
  type        = list(string)
  default     = ["gift-dev-1", "gift-dev-2", "gift-dev-3"]
}

variable "alb_suffix" {
  description = "Suffix for ALB names"
  type        = string
  default     = "-alb"
}

variable "vpc_id" {
  description = "VPC ID where the ALBs will be deployed"
  type        = string
}

variable "subnets" {
  description = "List of subnets for the ALBs"
  type        = list(string)
}

variable "security_group_ids" {
  description = "List of security group IDs for the ALBs"
  type        = list(string)
}

variable "cpu" {
  description = "Fargate Task CPU"
  type        = number
  default     = 256
}

variable "memory" {
  description = "Fargate Task Memory"
  type        = number
  default     = 512
}

variable "container_port" {
  description = "Container port for services"
  type        = number
  default     = 80
}

variable "image" {
  description = "Docker image to use for the ECS tasks"
  type        = string
}
2. ecs-cluster.tf
This file will create the ECS Fargate cluster and the services.

hcl
Copy code
resource "aws_ecs_cluster" "ecs_cluster" {
  name = var.cluster_name
}

resource "aws_ecs_task_definition" "task_def" {
  for_each = toset(var.services)

  family                   = each.key
  network_mode             = "awsvpc"
  requires_compatibilities = ["FARGATE"]
  cpu                      = var.cpu
  memory                   = var.memory
  execution_role_arn       = aws_iam_role.ecs_task_execution_role.arn
  task_role_arn            = aws_iam_role.ecs_task_role.arn

  container_definitions = jsonencode([{
    name      = each.key
    image     = var.image
    essential = true
    portMappings = [{
      containerPort = var.container_port
      hostPort      = var.container_port
    }]
  }])
}

resource "aws_ecs_service" "ecs_service" {
  for_each = toset(var.services)

  name            = each.key
  cluster         = aws_ecs_cluster.ecs_cluster.id
  task_definition = aws_ecs_task_definition.task_def[each.key].arn
  desired_count   = 1
  launch_type     = "FARGATE"

  network_configuration {
    subnets         = var.subnets
    security_groups = var.security_group_ids
    assign_public_ip = true
  }

  load_balancer {
    target_group_arn = aws_lb_target_group.target_group[each.key].arn
    container_name   = each.key
    container_port   = var.container_port
  }

  depends_on = [aws_lb_listener.listener]
}
3. alb.tf
This file will create the ALBs, target groups, and listeners for each service.

hcl
Copy code
resource "aws_lb" "alb" {
  for_each = toset(var.services)

  name            = "${each.key}${var.alb_suffix}"
  internal        = false
  load_balancer_type = "application"
  security_groups = var.security_group_ids
  subnets         = var.subnets

  enable_deletion_protection = false
  idle_timeout               = 60
}

resource "aws_lb_target_group" "target_group" {
  for_each = toset(var.services)

  name     = "${each.key}-tg"
  port     = var.container_port
  protocol = "HTTP"
  vpc_id   = var.vpc_id

  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 5
    unhealthy_threshold = 2
    matcher             = "200-299"
  }
}

resource "aws_lb_listener" "listener" {
  for_each = toset(var.services)

  load_balancer_arn = aws_lb.alb[each.key].arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.target_group[each.key].arn
  }
}
4. outputs.tf
This will output the key details of the ECS cluster and ALBs.

hcl
Copy code
output "ecs_cluster_id" {
  value = aws_ecs_cluster.ecs_cluster.id
}

output "alb_dns_names" {
  value = { for service, alb in aws_lb.alb : service => alb.dns_name }
}

output "target_groups" {
  value = { for service, tg in aws_lb_target_group.target_group : service => tg.arn }
}
5. main.tf
This file will call the other .tf files and ensure they are executed.

hcl
Copy code
provider "aws" {
  region = "us-east-1" # or your desired region
}

module "ecs_cluster" {
  source = "./ecs-cluster.tf"
}

module "alb" {
  source = "./alb.tf"
}
Usage
Ensure your image variable is set with the proper Docker image.
Fill in the necessary values for vpc_id, subnets, and security_group_ids in the variable files.
Run the following Terraform commands:
bash
Copy code
terraform init
terraform apply
This script will set up the ECS Fargate cluster with the services and their respective ALBs, target groups, and listeners.
